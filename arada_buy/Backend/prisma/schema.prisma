// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

## Implement schema in Prisma



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())

  orders     Order[]
  cartItems  CartItem[]
  reviews    Review[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Decimal   @db.Decimal(10,2)
  imageUrl    String?
  createdAt   DateTime  @default(now())

  categoryId Int
  category   Category   @relation(fields: [categoryId], references: [id])

  orderItems OrderItem[]
  cartItems  CartItem[]
  reviews    Review[]
}

model Order {
  id         Int         @id @default(autoincrement())
  totalAmount Decimal     @db.Decimal(10,2)
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())

  userId Int
  user   User        @relation(fields: [userId], references: [id])
  items  OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10,2)

  orderId   Int
  productId Int
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int      @default(1)

  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
}


